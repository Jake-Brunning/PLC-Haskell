-----------------------------------------------------------------------------
Info file generated by Happy Version 2.0.2 from Grammar.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parseCalc -> Exp                            (0)
	Exp -> let var '=' Exp in Exp                      (1)
	Exp -> Exp '+' Exp                                 (2)
	Exp -> Exp '-' Exp                                 (3)
	Exp -> Exp '**' Exp                                (4)
	Exp -> Exp '*' Exp                                 (5)
	Exp -> Exp '/' Exp                                 (6)
	Exp -> '(' Exp ')'                                 (7)
	Exp -> '-' Exp                                     (8)
	Exp -> int                                         (9)
	Exp -> var                                         (10)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	let            { TokenLet p }
	in             { TokenIn p }
	int            { TokenInt p $$ }
	var            { TokenVar p $$ }
	'='            { TokenEq p }
	'+'            { TokenPlus p }
	'-'            { TokenMinus p }
	'*'            { TokenTimes p }
	'/'            { TokenDiv p }
	'**'           { TokenExp p }
	'('            { TokenLParen p }
	')'            { TokenRParen p }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parseCalc rule  0
	Exp             rules 1, 2, 3, 4, 5, 6, 7, 8, 9, 10

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_parseCalc -> . Exp                           (rule 0)

	let            shift, and enter state 2
	int            shift, and enter state 4
	var            shift, and enter state 5
	'-'            shift, and enter state 6
	'('            shift, and enter state 7

	Exp            goto state 3

State 1

	Exp -> . let var '=' Exp in Exp                     (rule 1)

	let            shift, and enter state 2


State 2

	Exp -> let . var '=' Exp in Exp                     (rule 1)

	var            shift, and enter state 15


State 3

	%start_parseCalc -> Exp .                           (rule 0)
	Exp -> Exp . '+' Exp                                (rule 2)
	Exp -> Exp . '-' Exp                                (rule 3)
	Exp -> Exp . '**' Exp                               (rule 4)
	Exp -> Exp . '*' Exp                                (rule 5)
	Exp -> Exp . '/' Exp                                (rule 6)

	'+'            shift, and enter state 10
	'-'            shift, and enter state 11
	'*'            shift, and enter state 12
	'/'            shift, and enter state 13
	'**'           shift, and enter state 14
	%eof           accept


State 4

	Exp -> int .                                        (rule 9)

	in             reduce using rule 9
	'+'            reduce using rule 9
	'-'            reduce using rule 9
	'*'            reduce using rule 9
	'/'            reduce using rule 9
	'**'           reduce using rule 9
	')'            reduce using rule 9
	%eof           reduce using rule 9


State 5

	Exp -> var .                                        (rule 10)

	in             reduce using rule 10
	'+'            reduce using rule 10
	'-'            reduce using rule 10
	'*'            reduce using rule 10
	'/'            reduce using rule 10
	'**'           reduce using rule 10
	')'            reduce using rule 10
	%eof           reduce using rule 10


State 6

	Exp -> '-' . Exp                                    (rule 8)

	let            shift, and enter state 2
	int            shift, and enter state 4
	var            shift, and enter state 5
	'-'            shift, and enter state 6
	'('            shift, and enter state 7

	Exp            goto state 9

State 7

	Exp -> '(' . Exp ')'                                (rule 7)

	let            shift, and enter state 2
	int            shift, and enter state 4
	var            shift, and enter state 5
	'-'            shift, and enter state 6
	'('            shift, and enter state 7

	Exp            goto state 8

State 8

	Exp -> Exp . '+' Exp                                (rule 2)
	Exp -> Exp . '-' Exp                                (rule 3)
	Exp -> Exp . '**' Exp                               (rule 4)
	Exp -> Exp . '*' Exp                                (rule 5)
	Exp -> Exp . '/' Exp                                (rule 6)
	Exp -> '(' Exp . ')'                                (rule 7)

	'+'            shift, and enter state 10
	'-'            shift, and enter state 11
	'*'            shift, and enter state 12
	'/'            shift, and enter state 13
	'**'           shift, and enter state 14
	')'            shift, and enter state 22


State 9

	Exp -> Exp . '+' Exp                                (rule 2)
	Exp -> Exp . '-' Exp                                (rule 3)
	Exp -> Exp . '**' Exp                               (rule 4)
	Exp -> Exp . '*' Exp                                (rule 5)
	Exp -> Exp . '/' Exp                                (rule 6)
	Exp -> '-' Exp .                                    (rule 8)

	in             reduce using rule 8
	'+'            reduce using rule 8
	'-'            reduce using rule 8
	'*'            reduce using rule 8
	'/'            reduce using rule 8
	'**'           reduce using rule 8
	')'            reduce using rule 8
	%eof           reduce using rule 8


State 10

	Exp -> Exp '+' . Exp                                (rule 2)

	let            shift, and enter state 2
	int            shift, and enter state 4
	var            shift, and enter state 5
	'-'            shift, and enter state 6
	'('            shift, and enter state 7

	Exp            goto state 21

State 11

	Exp -> Exp '-' . Exp                                (rule 3)

	let            shift, and enter state 2
	int            shift, and enter state 4
	var            shift, and enter state 5
	'-'            shift, and enter state 6
	'('            shift, and enter state 7

	Exp            goto state 20

State 12

	Exp -> Exp '*' . Exp                                (rule 5)

	let            shift, and enter state 2
	int            shift, and enter state 4
	var            shift, and enter state 5
	'-'            shift, and enter state 6
	'('            shift, and enter state 7

	Exp            goto state 19

State 13

	Exp -> Exp '/' . Exp                                (rule 6)

	let            shift, and enter state 2
	int            shift, and enter state 4
	var            shift, and enter state 5
	'-'            shift, and enter state 6
	'('            shift, and enter state 7

	Exp            goto state 18

State 14

	Exp -> Exp '**' . Exp                               (rule 4)

	let            shift, and enter state 2
	int            shift, and enter state 4
	var            shift, and enter state 5
	'-'            shift, and enter state 6
	'('            shift, and enter state 7

	Exp            goto state 17

State 15

	Exp -> let var . '=' Exp in Exp                     (rule 1)

	'='            shift, and enter state 16


State 16

	Exp -> let var '=' . Exp in Exp                     (rule 1)

	let            shift, and enter state 2
	int            shift, and enter state 4
	var            shift, and enter state 5
	'-'            shift, and enter state 6
	'('            shift, and enter state 7

	Exp            goto state 23

State 17

	Exp -> Exp . '+' Exp                                (rule 2)
	Exp -> Exp . '-' Exp                                (rule 3)
	Exp -> Exp . '**' Exp                               (rule 4)
	Exp -> Exp '**' Exp .                               (rule 4)
	Exp -> Exp . '*' Exp                                (rule 5)
	Exp -> Exp . '/' Exp                                (rule 6)

	in             reduce using rule 4
	'+'            reduce using rule 4
	'-'            reduce using rule 4
	'*'            reduce using rule 4
	'/'            reduce using rule 4
	'**'           reduce using rule 4
	')'            reduce using rule 4
	%eof           reduce using rule 4


State 18

	Exp -> Exp . '+' Exp                                (rule 2)
	Exp -> Exp . '-' Exp                                (rule 3)
	Exp -> Exp . '**' Exp                               (rule 4)
	Exp -> Exp . '*' Exp                                (rule 5)
	Exp -> Exp . '/' Exp                                (rule 6)
	Exp -> Exp '/' Exp .                                (rule 6)

	in             reduce using rule 6
	'+'            reduce using rule 6
	'-'            reduce using rule 6
	'*'            reduce using rule 6
	'/'            reduce using rule 6
	'**'           shift, and enter state 14
	')'            reduce using rule 6
	%eof           reduce using rule 6


State 19

	Exp -> Exp . '+' Exp                                (rule 2)
	Exp -> Exp . '-' Exp                                (rule 3)
	Exp -> Exp . '**' Exp                               (rule 4)
	Exp -> Exp . '*' Exp                                (rule 5)
	Exp -> Exp '*' Exp .                                (rule 5)
	Exp -> Exp . '/' Exp                                (rule 6)

	in             reduce using rule 5
	'+'            reduce using rule 5
	'-'            reduce using rule 5
	'*'            reduce using rule 5
	'/'            reduce using rule 5
	'**'           shift, and enter state 14
	')'            reduce using rule 5
	%eof           reduce using rule 5


State 20

	Exp -> Exp . '+' Exp                                (rule 2)
	Exp -> Exp . '-' Exp                                (rule 3)
	Exp -> Exp '-' Exp .                                (rule 3)
	Exp -> Exp . '**' Exp                               (rule 4)
	Exp -> Exp . '*' Exp                                (rule 5)
	Exp -> Exp . '/' Exp                                (rule 6)

	in             reduce using rule 3
	'+'            reduce using rule 3
	'-'            reduce using rule 3
	'*'            shift, and enter state 12
	'/'            shift, and enter state 13
	'**'           shift, and enter state 14
	')'            reduce using rule 3
	%eof           reduce using rule 3


State 21

	Exp -> Exp . '+' Exp                                (rule 2)
	Exp -> Exp '+' Exp .                                (rule 2)
	Exp -> Exp . '-' Exp                                (rule 3)
	Exp -> Exp . '**' Exp                               (rule 4)
	Exp -> Exp . '*' Exp                                (rule 5)
	Exp -> Exp . '/' Exp                                (rule 6)

	in             reduce using rule 2
	'+'            reduce using rule 2
	'-'            reduce using rule 2
	'*'            shift, and enter state 12
	'/'            shift, and enter state 13
	'**'           shift, and enter state 14
	')'            reduce using rule 2
	%eof           reduce using rule 2


State 22

	Exp -> '(' Exp ')' .                                (rule 7)

	in             reduce using rule 7
	'+'            reduce using rule 7
	'-'            reduce using rule 7
	'*'            reduce using rule 7
	'/'            reduce using rule 7
	'**'           reduce using rule 7
	')'            reduce using rule 7
	%eof           reduce using rule 7


State 23

	Exp -> let var '=' Exp . in Exp                     (rule 1)
	Exp -> Exp . '+' Exp                                (rule 2)
	Exp -> Exp . '-' Exp                                (rule 3)
	Exp -> Exp . '**' Exp                               (rule 4)
	Exp -> Exp . '*' Exp                                (rule 5)
	Exp -> Exp . '/' Exp                                (rule 6)

	in             shift, and enter state 24
	'+'            shift, and enter state 10
	'-'            shift, and enter state 11
	'*'            shift, and enter state 12
	'/'            shift, and enter state 13
	'**'           shift, and enter state 14


State 24

	Exp -> let var '=' Exp in . Exp                     (rule 1)

	let            shift, and enter state 2
	int            shift, and enter state 4
	var            shift, and enter state 5
	'-'            shift, and enter state 6
	'('            shift, and enter state 7

	Exp            goto state 25

State 25

	Exp -> let var '=' Exp in Exp .                     (rule 1)
	Exp -> Exp . '+' Exp                                (rule 2)
	Exp -> Exp . '-' Exp                                (rule 3)
	Exp -> Exp . '**' Exp                               (rule 4)
	Exp -> Exp . '*' Exp                                (rule 5)
	Exp -> Exp . '/' Exp                                (rule 6)

	in             reduce using rule 1
	'+'            shift, and enter state 10
	'-'            shift, and enter state 11
	'*'            shift, and enter state 12
	'/'            shift, and enter state 13
	'**'           shift, and enter state 14
	')'            reduce using rule 1
	%eof           reduce using rule 1


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 11
Number of terminals: 12
Number of non-terminals: 2
Number of states: 26
