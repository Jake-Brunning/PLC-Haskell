-----------------------------------------------------------------------------
Info file generated by Happy Version 2.0.2 from MDLGram.y
-----------------------------------------------------------------------------


terminal Chain is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parseMDL -> Program                         (0)
	Program -> Seq                                     (1)
	Seq -> Exp Seq                                     (2)
	Seq -> Exp                                         (3)
	Exp -> Forward TokenInt                            (4)
	Exp -> Back TokenInt                               (5)
	Exp -> RotateLeft                                  (6)
	Exp -> RotateRight                                 (7)
	Exp -> If Exp Then Exp Else Exp End                (8)
	Exp -> Check TokenInt                              (9)
	Exp -> TokenInt                                    (10)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	TokenInt       { TokenInt $$ }
	Forward        { TokenForward }
	Back           { TokenBack }
	RotateLeft     { TokenRotateLeft }
	RotateRight    { TokenRotateRight }
	If             { TokenIf }
	Else           { TokenElse }
	Then           { TokenThen }
	End            { TokenEnd }
	Check          { TokenCheck }
	Chain          { TokenChain }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parseMDL rule  0
	Program         rule  1
	Seq             rules 2, 3
	Exp             rules 4, 5, 6, 7, 8, 9, 10

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_parseMDL -> . Program                        (rule 0)

	TokenInt       shift, and enter state 4
	Forward        shift, and enter state 5
	Back           shift, and enter state 6
	RotateLeft     shift, and enter state 7
	RotateRight    shift, and enter state 8
	If             shift, and enter state 9
	Check          shift, and enter state 10

	Program        goto state 11
	Seq            goto state 2
	Exp            goto state 3

State 1

	Program -> . Seq                                    (rule 1)

	TokenInt       shift, and enter state 4
	Forward        shift, and enter state 5
	Back           shift, and enter state 6
	RotateLeft     shift, and enter state 7
	RotateRight    shift, and enter state 8
	If             shift, and enter state 9
	Check          shift, and enter state 10

	Seq            goto state 2
	Exp            goto state 3

State 2

	Program -> Seq .                                    (rule 1)

	%eof           reduce using rule 1


State 3

	Seq -> Exp . Seq                                    (rule 2)
	Seq -> Exp .                                        (rule 3)

	TokenInt       shift, and enter state 4
	Forward        shift, and enter state 5
	Back           shift, and enter state 6
	RotateLeft     shift, and enter state 7
	RotateRight    shift, and enter state 8
	If             shift, and enter state 9
	Check          shift, and enter state 10
	%eof           reduce using rule 3

	Seq            goto state 16
	Exp            goto state 3

State 4

	Exp -> TokenInt .                                   (rule 10)

	TokenInt       reduce using rule 10
	Forward        reduce using rule 10
	Back           reduce using rule 10
	RotateLeft     reduce using rule 10
	RotateRight    reduce using rule 10
	If             reduce using rule 10
	Else           reduce using rule 10
	Then           reduce using rule 10
	End            reduce using rule 10
	Check          reduce using rule 10
	%eof           reduce using rule 10


State 5

	Exp -> Forward . TokenInt                           (rule 4)

	TokenInt       shift, and enter state 15


State 6

	Exp -> Back . TokenInt                              (rule 5)

	TokenInt       shift, and enter state 14


State 7

	Exp -> RotateLeft .                                 (rule 6)

	TokenInt       reduce using rule 6
	Forward        reduce using rule 6
	Back           reduce using rule 6
	RotateLeft     reduce using rule 6
	RotateRight    reduce using rule 6
	If             reduce using rule 6
	Else           reduce using rule 6
	Then           reduce using rule 6
	End            reduce using rule 6
	Check          reduce using rule 6
	%eof           reduce using rule 6


State 8

	Exp -> RotateRight .                                (rule 7)

	TokenInt       reduce using rule 7
	Forward        reduce using rule 7
	Back           reduce using rule 7
	RotateLeft     reduce using rule 7
	RotateRight    reduce using rule 7
	If             reduce using rule 7
	Else           reduce using rule 7
	Then           reduce using rule 7
	End            reduce using rule 7
	Check          reduce using rule 7
	%eof           reduce using rule 7


State 9

	Exp -> If . Exp Then Exp Else Exp End               (rule 8)

	TokenInt       shift, and enter state 4
	Forward        shift, and enter state 5
	Back           shift, and enter state 6
	RotateLeft     shift, and enter state 7
	RotateRight    shift, and enter state 8
	If             shift, and enter state 9
	Check          shift, and enter state 10

	Exp            goto state 13

State 10

	Exp -> Check . TokenInt                             (rule 9)

	TokenInt       shift, and enter state 12


State 11

	%start_parseMDL -> Program .                        (rule 0)

	%eof           accept


State 12

	Exp -> Check TokenInt .                             (rule 9)

	TokenInt       reduce using rule 9
	Forward        reduce using rule 9
	Back           reduce using rule 9
	RotateLeft     reduce using rule 9
	RotateRight    reduce using rule 9
	If             reduce using rule 9
	Else           reduce using rule 9
	Then           reduce using rule 9
	End            reduce using rule 9
	Check          reduce using rule 9
	%eof           reduce using rule 9


State 13

	Exp -> If Exp . Then Exp Else Exp End               (rule 8)

	Then           shift, and enter state 17


State 14

	Exp -> Back TokenInt .                              (rule 5)

	TokenInt       reduce using rule 5
	Forward        reduce using rule 5
	Back           reduce using rule 5
	RotateLeft     reduce using rule 5
	RotateRight    reduce using rule 5
	If             reduce using rule 5
	Else           reduce using rule 5
	Then           reduce using rule 5
	End            reduce using rule 5
	Check          reduce using rule 5
	%eof           reduce using rule 5


State 15

	Exp -> Forward TokenInt .                           (rule 4)

	TokenInt       reduce using rule 4
	Forward        reduce using rule 4
	Back           reduce using rule 4
	RotateLeft     reduce using rule 4
	RotateRight    reduce using rule 4
	If             reduce using rule 4
	Else           reduce using rule 4
	Then           reduce using rule 4
	End            reduce using rule 4
	Check          reduce using rule 4
	%eof           reduce using rule 4


State 16

	Seq -> Exp Seq .                                    (rule 2)

	%eof           reduce using rule 2


State 17

	Exp -> If Exp Then . Exp Else Exp End               (rule 8)

	TokenInt       shift, and enter state 4
	Forward        shift, and enter state 5
	Back           shift, and enter state 6
	RotateLeft     shift, and enter state 7
	RotateRight    shift, and enter state 8
	If             shift, and enter state 9
	Check          shift, and enter state 10

	Exp            goto state 18

State 18

	Exp -> If Exp Then Exp . Else Exp End               (rule 8)

	Else           shift, and enter state 19


State 19

	Exp -> If Exp Then Exp Else . Exp End               (rule 8)

	TokenInt       shift, and enter state 4
	Forward        shift, and enter state 5
	Back           shift, and enter state 6
	RotateLeft     shift, and enter state 7
	RotateRight    shift, and enter state 8
	If             shift, and enter state 9
	Check          shift, and enter state 10

	Exp            goto state 20

State 20

	Exp -> If Exp Then Exp Else Exp . End               (rule 8)

	End            shift, and enter state 21


State 21

	Exp -> If Exp Then Exp Else Exp End .               (rule 8)

	TokenInt       reduce using rule 8
	Forward        reduce using rule 8
	Back           reduce using rule 8
	RotateLeft     reduce using rule 8
	RotateRight    reduce using rule 8
	If             reduce using rule 8
	Else           reduce using rule 8
	Then           reduce using rule 8
	End            reduce using rule 8
	Check          reduce using rule 8
	%eof           reduce using rule 8


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 11
Number of terminals: 11
Number of non-terminals: 4
Number of states: 22
